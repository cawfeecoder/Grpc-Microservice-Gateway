// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gateway.proto

/*
Package GatewayProto is a generated protocol buffer package.

It is generated from these files:
	gateway.proto

It has these top-level messages:
	SvcReq
	SvcResp
*/
package GatewayProto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Send a request to the ServiceRegistry within the Microservice Gateway
type SvcReq struct {
	ServiceName       string `protobuf:"bytes,1,opt,name=serviceName" json:"serviceName,omitempty"`
	ServiceConsulAddr string `protobuf:"bytes,2,opt,name=serviceConsulAddr" json:"serviceConsulAddr,omitempty"`
	Action            string `protobuf:"bytes,3,opt,name=action" json:"action,omitempty"`
}

func (m *SvcReq) Reset()                    { *m = SvcReq{} }
func (m *SvcReq) String() string            { return proto.CompactTextString(m) }
func (*SvcReq) ProtoMessage()               {}
func (*SvcReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SvcReq) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *SvcReq) GetServiceConsulAddr() string {
	if m != nil {
		return m.ServiceConsulAddr
	}
	return ""
}

func (m *SvcReq) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

// Respond to the request
type SvcResp struct {
	StatusCode int32  `protobuf:"varint,1,opt,name=statusCode" json:"statusCode,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *SvcResp) Reset()                    { *m = SvcResp{} }
func (m *SvcResp) String() string            { return proto.CompactTextString(m) }
func (*SvcResp) ProtoMessage()               {}
func (*SvcResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SvcResp) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *SvcResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*SvcReq)(nil), "GatewayProto.SvcReq")
	proto.RegisterType((*SvcResp)(nil), "GatewayProto.SvcResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MicroserviceGatewayRegistry service

type MicroserviceGatewayRegistryClient interface {
	Send(ctx context.Context, in *SvcReq, opts ...grpc.CallOption) (*SvcResp, error)
}

type microserviceGatewayRegistryClient struct {
	cc *grpc.ClientConn
}

func NewMicroserviceGatewayRegistryClient(cc *grpc.ClientConn) MicroserviceGatewayRegistryClient {
	return &microserviceGatewayRegistryClient{cc}
}

func (c *microserviceGatewayRegistryClient) Send(ctx context.Context, in *SvcReq, opts ...grpc.CallOption) (*SvcResp, error) {
	out := new(SvcResp)
	err := grpc.Invoke(ctx, "/GatewayProto.MicroserviceGatewayRegistry/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MicroserviceGatewayRegistry service

type MicroserviceGatewayRegistryServer interface {
	Send(context.Context, *SvcReq) (*SvcResp, error)
}

func RegisterMicroserviceGatewayRegistryServer(s *grpc.Server, srv MicroserviceGatewayRegistryServer) {
	s.RegisterService(&_MicroserviceGatewayRegistry_serviceDesc, srv)
}

func _MicroserviceGatewayRegistry_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceGatewayRegistryServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GatewayProto.MicroserviceGatewayRegistry/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceGatewayRegistryServer).Send(ctx, req.(*SvcReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MicroserviceGatewayRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GatewayProto.MicroserviceGatewayRegistry",
	HandlerType: (*MicroserviceGatewayRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _MicroserviceGatewayRegistry_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}

func init() { proto.RegisterFile("gateway.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcd, 0x4a, 0xc5, 0x30,
	0x10, 0x85, 0xbd, 0xfe, 0xf4, 0xe2, 0xa8, 0x0b, 0x07, 0x95, 0xa0, 0x20, 0xa5, 0x2b, 0x17, 0xd2,
	0x85, 0xe2, 0x03, 0x48, 0x17, 0xae, 0x14, 0x49, 0x7d, 0x81, 0x98, 0x0c, 0x25, 0x60, 0x9b, 0x98,
	0x49, 0x2b, 0x7d, 0x7b, 0x31, 0x8d, 0x50, 0xd0, 0xe5, 0x77, 0xe6, 0xc0, 0xc7, 0x19, 0x38, 0xe9,
	0x54, 0xa4, 0x2f, 0x35, 0xd7, 0x3e, 0xb8, 0xe8, 0xf0, 0xf8, 0x69, 0xc1, 0xd7, 0x1f, 0xaa, 0x3c,
	0x14, 0xed, 0xa4, 0x25, 0x7d, 0x62, 0x09, 0x47, 0x4c, 0x61, 0xb2, 0x9a, 0x5e, 0x54, 0x4f, 0x62,
	0x53, 0x6e, 0x6e, 0x0e, 0xe5, 0x3a, 0xc2, 0x5b, 0x38, 0xcd, 0xd8, 0xb8, 0x81, 0xc7, 0x8f, 0x47,
	0x63, 0x82, 0xd8, 0x4d, 0xbd, 0xbf, 0x07, 0xbc, 0x80, 0x42, 0xe9, 0x68, 0xdd, 0x20, 0xf6, 0x52,
	0x25, 0x53, 0xd5, 0xc0, 0x36, 0x19, 0xd9, 0xe3, 0x35, 0x00, 0x47, 0x15, 0x47, 0x6e, 0x9c, 0x59,
	0x8c, 0x07, 0x72, 0x95, 0xa0, 0x80, 0x6d, 0x4f, 0xcc, 0xaa, 0xa3, 0xac, 0xf9, 0xc5, 0xbb, 0x37,
	0xb8, 0x7a, 0xb6, 0x3a, 0xb8, 0xac, 0xcd, 0x93, 0x24, 0x75, 0x96, 0x63, 0x98, 0xf1, 0x01, 0xf6,
	0x5b, 0x1a, 0x0c, 0x9e, 0xd5, 0xeb, 0xb1, 0xf5, 0xb2, 0xf4, 0xf2, 0xfc, 0x9f, 0x94, 0x7d, 0xb5,
	0xf3, 0x5e, 0xa4, 0x0f, 0xdd, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x04, 0x61, 0xe9, 0xe7, 0x32,
	0x01, 0x00, 0x00,
}
